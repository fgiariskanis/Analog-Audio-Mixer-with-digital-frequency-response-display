
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800064  00800064  000002ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c8  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000645  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cd  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  0000157c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000373  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025d  00000000  00000000  00001a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_1>
   8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 10 01 	call	0x220	; 0x220 <main>
  8a:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <io_init>:


void io_init()
{

DDRB = 0xFF;                //PB as output
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
PORTB= 0x00;                //keep all LEDs off
  96:	18 ba       	out	0x18, r1	; 24

DDRA = 0x00;                //PA as input
  98:	1a ba       	out	0x1a, r1	; 26
PORTA |= 0b00000011;        //enable pull ups for
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	8b bb       	out	0x1b, r24	; 27
  a0:	08 95       	ret

000000a2 <init_timer>:
}

void init_timer() // Init Timer for Time = FCPU/1024
{
 // Prescaler = FCPU/1024
 TCCR0|=(1<<CS02)|(1<<CS00);
  a2:	83 b7       	in	r24, 0x33	; 51
  a4:	85 60       	ori	r24, 0x05	; 5
  a6:	83 bf       	out	0x33, r24	; 51
 //Enable Overflow Interrupt Enable
 TIMSK|=(1<<TOIE0);
  a8:	89 b7       	in	r24, 0x39	; 57
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	89 bf       	out	0x39, r24	; 57
 //Initialize Counter
 TCNT0=0;
  ae:	12 be       	out	0x32, r1	; 50
 //Enable Global Interrupts
 sei();
  b0:	78 94       	sei
  b2:	08 95       	ret

000000b4 <led_use>:
							//only first two pins
}

void led_use()
{
		if((PINA & 0b00000011)==0) //if PA0 && PA1 
  b4:	89 b3       	in	r24, 0x19	; 25
  b6:	83 70       	andi	r24, 0x03	; 3
  b8:	51 f4       	brne	.+20     	; 0xce <led_use+0x1a>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
  ba:	9f e0       	ldi	r25, 0x0F	; 15
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	a8 95       	wdr
  c4:	81 bd       	out	0x21, r24	; 33
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	91 bd       	out	0x21, r25	; 33
		{
			wdt_enable (WDTO_2S);//set WatchDog Timer for 2s
			init_timer();//Init Timer, whos Interrupt use some Leds
  ca:	0e 94 51 00 	call	0xa2	; 0xa2 <init_timer>
  ce:	08 95       	ret

000000d0 <init_timer1>:
}

void init_timer1() // Init Timer with prescaler = 64 and CTC mode
{
    // set up timer with prescaler = 64 and CTC mode
    TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
  d0:	8e b5       	in	r24, 0x2e	; 46
  d2:	8b 60       	ori	r24, 0x0B	; 11
  d4:	8e bd       	out	0x2e, r24	; 46
    // initialize counter
    TCNT1 = 0;
  d6:	1d bc       	out	0x2d, r1	; 45
  d8:	1c bc       	out	0x2c, r1	; 44
    // initialize compare value
    OCR1A = 24999;
  da:	87 ea       	ldi	r24, 0xA7	; 167
  dc:	91 e6       	ldi	r25, 0x61	; 97
  de:	9b bd       	out	0x2b, r25	; 43
  e0:	8a bd       	out	0x2a, r24	; 42
    // enable compare interrupt
    TIMSK |= (1 << OCIE1A);
  e2:	89 b7       	in	r24, 0x39	; 57
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	89 bf       	out	0x39, r24	; 57
    // enable global interrupts
    sei();
  e8:	78 94       	sei
  ea:	08 95       	ret

000000ec <__vector_9>:
}

ISR(TIMER0_OVF_vect) //Interruption that use some Leds every Timer0 OVF
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
		PORTB=p1[i];    //output data
  fc:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	e0 5a       	subi	r30, 0xA0	; 160
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	80 81       	ld	r24, Z
 108:	88 bb       	out	0x18, r24	; 24
		if(i==3){i=0;}		//pattern counter
 10a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	19 f4       	brne	.+6      	; 0x118 <__vector_9+0x2c>
 112:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
 116:	03 c0       	rjmp	.+6      	; 0x11e <__vector_9+0x32>
		else {i++;}
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
}
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_6>:

ISR(TIMER1_COMPA_vect)//Interruption that Inits Timer0 once at Timer1 COMPA    ----->   (TIMER0 WITH DELAY)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	init_timer();			//Timer0 that uses Leds
 150:	0e 94 51 00 	call	0xa2	; 0xa2 <init_timer>
	TCCR1B &= 0B11111000;		//Stop Timer1
 154:	8e b5       	in	r24, 0x2e	; 46
 156:	88 7f       	andi	r24, 0xF8	; 248
 158:	8e bd       	out	0x2e, r24	; 46
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_2>:

ISR(INT1_vect)//INIT TIMERS INTERRUPT
{//Interruption that comes with PD3(INT1) and check if PA0 button or PA1 button is pressed so it uses some Leds either with no delay, either with delay
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
		if((PINA & 0b00000010)==0)	{init_timer1();}//init Timer1
 19e:	c9 99       	sbic	0x19, 1	; 25
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <__vector_2+0x2c>
 1a2:	0e 94 68 00 	call	0xd0	; 0xd0 <init_timer1>
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <__vector_2+0x32>
		else if((PINA & 0b00000001)==0){init_timer();}//init Timer0
 1a8:	c8 9b       	sbis	0x19, 0	; 25
 1aa:	0e 94 51 00 	call	0xa2	; 0xa2 <init_timer>
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <__vector_1>:

ISR(INT0_vect)//RESET INTERRUPT
{//Interruption that comes with PD2(INT0) and check if PA0 button or PA1 button is pressed so it either resets the output port and stop timer0, either it enables the watchdog timer
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
	if((PINA & 0b00000001)==0){PORTB = 0;  TCCR0 &= 0B11111000;}//Clear Leds AND Reset Timer0
 1de:	c8 99       	sbic	0x19, 0	; 25
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <__vector_1+0x1c>
 1e2:	18 ba       	out	0x18, r1	; 24
 1e4:	83 b7       	in	r24, 0x33	; 51
 1e6:	88 7f       	andi	r24, 0xF8	; 248
 1e8:	83 bf       	out	0x33, r24	; 51
 1ea:	0a c0       	rjmp	.+20     	; 0x200 <__vector_1+0x30>
	else if ((PINA & 0b00000010)==0){wdt_enable (WDTO_2S);}//Enable WatchDog Timer
 1ec:	c9 99       	sbic	0x19, 1	; 25
 1ee:	08 c0       	rjmp	.+16     	; 0x200 <__vector_1+0x30>
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	88 e1       	ldi	r24, 0x18	; 24
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	a8 95       	wdr
 1fa:	81 bd       	out	0x21, r24	; 33
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	91 bd       	out	0x21, r25	; 33
}
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <init_interrupt>:


void init_interrupt()//enable Interrupts for ports PD2,PD3
{
	// disable external interrupts while initializing
	cli();
 20e:	f8 94       	cli
	//INIT INTERRUPT VALUES
	GICR =(1 << INT1 | 1 << INT0);
 210:	80 ec       	ldi	r24, 0xC0	; 192
 212:	8b bf       	out	0x3b, r24	; 59
	MCUCR= 1<<ISC10 | 1<<ISC11;
 214:	8c e0       	ldi	r24, 0x0C	; 12
 216:	85 bf       	out	0x35, r24	; 53
	MCUCR= 1<<ISC00 | 1<<ISC01;
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	85 bf       	out	0x35, r24	; 53
	// enable external interrupts
	sei();
 21c:	78 94       	sei
 21e:	08 95       	ret

00000220 <main>:

unsigned char i=0;  //Pattern counter  

void main (void)
{
	io_init(); //Hardware Init
 220:	0e 94 49 00 	call	0x92	; 0x92 <io_init>
	init_interrupt();//Interrupt Init
 224:	0e 94 07 01 	call	0x20e	; 0x20e <init_interrupt>
	while(1){led_use();}; //Demo I/O use 
 228:	0e 94 5a 00 	call	0xb4	; 0xb4 <led_use>
 22c:	fd cf       	rjmp	.-6      	; 0x228 <main+0x8>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
